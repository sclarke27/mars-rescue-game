/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./browser-main.js":
/*!*************************!*\
  !*** ./browser-main.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const BrowserGamePad = __webpack_require__(/*! ./utils/BrowserGamePad */ \"./utils/BrowserGamePad.js\");\r\n\r\nconst Main = __webpack_require__(/*! ./main */ \"./main.js\");\r\n\r\nclass BrowserMain extends Main {\r\n    constructor() {\r\n        super();\r\n    }\r\n    start() {\r\n        const CanvasPanel = __webpack_require__(/*! ./utils/CanvasPanel */ \"./utils/CanvasPanel.js\");\r\n        this.panel = new CanvasPanel(this.screenSize);\r\n        window.document.body.style.setProperty(\"--canvas-width\", `${this.screenSize.width}px`);\r\n        this.renderInterval = 1000 / 120;\r\n        this.fonts = {\r\n            uiFont: \"7px Lato\",\r\n            uiFont2: \"10px Comfortaa\",\r\n            // regularFont: \"8px arial\",\r\n            scriptFont: \"17px Roboto\",\r\n        };\r\n\r\n        this.gameController1 = new BrowserGamePad();\r\n\r\n        super.start();\r\n    }\r\n}\r\n\r\nwindow.textOffsetX = 0.25;\r\nwindow.textOffsetY = 0;\r\nconst app = new BrowserMain();\r\napp.start();\r\n\n\n//# sourceURL=webpack://led-testing/./browser-main.js?");

/***/ }),

/***/ "./main.js":
/*!*****************!*\
  !*** ./main.js ***!
  \*****************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const ScenarioManager = __webpack_require__(/*! ./scenarios/ScenarioManager */ \"./scenarios/ScenarioManager.js\");\r\n\r\nclass Main {\r\n    constructor() {\r\n        this.panel = null;\r\n        this.mainLoopTimeout = null;\r\n        this.prevTime = null;\r\n        this.frames = 0;\r\n        this.fps = 0;\r\n        this.renderInterval = 1000 / 30;\r\n        this.lastRenderTick = null;\r\n        this.gameController1 = null;\r\n        this.autoStart = true;\r\n        this.scenarioManager = null;\r\n        this.startButtonPressed = false;\r\n        this.screenSize = {\r\n            width: 256,\r\n            height: 64,\r\n        };\r\n        this.fonts = {};\r\n        this.scenario = null;\r\n        this.isBrowserBased = true;\r\n    }\r\n\r\n    start() {\r\n        this.prevTime = Date.now();\r\n        this.lastRenderTick = Date.now();\r\n\r\n        this.scenarioManager = new ScenarioManager(this.panel, this.screenSize, this.fonts, this.isBrowserBased);\r\n        if (this.autoStart) {\r\n            this.scenarioManager.changeScenario(\"gameLoop\");\r\n        } else {\r\n            this.scenarioManager.changeScenario(\"startScreen\");\r\n        }\r\n        this.scenarioManager.start();\r\n\r\n        this.tick();\r\n    }\r\n\r\n    tick() {\r\n        const time = Date.now();\r\n        // compute fps\r\n        this.frames++;\r\n        if (time > this.prevTime + 1000) {\r\n            this.fps = ((this.frames * 1000) / (time - this.prevTime)).toFixed(2);\r\n            this.prevTime = time;\r\n            this.frames = 0;\r\n        }\r\n\r\n        // trigger read from game controller\r\n        if (this.gameController1) {\r\n            this.gameController1.read();\r\n\r\n            if ((this.gameController1.data.buttons.startButton === true || this.gameController1.data.buttons.startButton === 1) && !this.startButtonPressed) {\r\n                this.startButtonPressed = true;\r\n                this.scenarioManager.handleStartButton(true);\r\n            } else if ((this.gameController1.data.buttons.startButton === false || this.gameController1.data.buttons.startButton === 0) && this.startButtonPressed) {\r\n                this.startButtonPressed = false;\r\n                this.scenarioManager.handleStartButton(false);\r\n            }\r\n\r\n            this.scenarioManager.handleInput(this.gameController1.data);\r\n        }\r\n\r\n        this.scenarioManager.tick(time);\r\n\r\n        if (time - this.lastRenderTick >= this.renderInterval) {\r\n            // render screen\r\n            this.render(time);\r\n\r\n            this.lastRenderTick = time;\r\n        }\r\n\r\n        // do loop\r\n        clearTimeout(this.mainLoopTimeout);\r\n        this.mainLoopTimeout = setTimeout(this.tick.bind(this), 1);\r\n    }\r\n\r\n    render() {\r\n        // refresh panels\r\n        this.panel.clear();\r\n\r\n        // draw scenario screen\r\n        this.scenarioManager.render();\r\n\r\n        // update fps\r\n        this.panel.drawText(1, 1, `${this.fps} FPS`, this.fonts.uiFont, 100, 100, 100);\r\n\r\n        // draw play field to screen\r\n        this.panel.render();\r\n    }\r\n}\r\n\r\nmodule.exports = Main;\r\n\n\n//# sourceURL=webpack://led-testing/./main.js?");

/***/ }),

/***/ "./objects/GameObject.js":
/*!*******************************!*\
  !*** ./objects/GameObject.js ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Sprite = __webpack_require__(/*! ../sprites/Sprite */ \"./sprites/Sprite.js\");\r\n\r\nclass GameObject {\r\n    constructor(x, y, panel, sprite, simulation) {\r\n        this.type = null;\r\n        this.posX = x;\r\n        this.posY = y;\r\n        this.panel = panel;\r\n        this.sprite = sprite ? new Sprite(sprite) : null;\r\n        this.explosionSprite = null;\r\n        this.isActive = false;\r\n        this.facingForward = true;\r\n        this.deactivationTimeout = 120;\r\n        this.deactivationStart = null;\r\n        this.drawBoundingBox = false;\r\n        this.state = null;\r\n        this.isAlive = true;\r\n        this.simulation = simulation;\r\n        this.screenSize = null;\r\n        this.boundingBox = {\r\n            x1: -1,\r\n            y1: -1,\r\n            x2: -1,\r\n            y2: -1,\r\n        };\r\n        this.centerPoint = {\r\n            x: -1,\r\n            y: -1,\r\n        };\r\n    }\r\n\r\n    tick(time) {\r\n        if (this.deactivationStart !== null) {\r\n            if (time - this.deactivationStart >= this.deactivationTimeout) {\r\n                this.deactivate();\r\n            }\r\n        }\r\n        this.updateBoundingBox();\r\n        this.checkCollisions();\r\n    }\r\n\r\n    animate(time) {\r\n        if (this.sprite && this.isActive && this.isAlive) {\r\n            this.sprite.animate(time);\r\n        }\r\n        if (this.explosionSprite && this.isActive && !this.isAlive) {\r\n            this.explosionSprite.animate(time);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.drawBoundingBox) {\r\n            this.panel.drawLine(this.boundingBox.x1, this.boundingBox.y1, this.boundingBox.x2, this.boundingBox.y1, 255, 0, 0);\r\n            this.panel.drawLine(this.boundingBox.x2, this.boundingBox.y1, this.boundingBox.x2, this.boundingBox.y2, 255, 0, 0);\r\n            this.panel.drawLine(this.boundingBox.x2, this.boundingBox.y2, this.boundingBox.x1, this.boundingBox.y2, 255, 0, 0);\r\n            this.panel.drawLine(this.boundingBox.x1, this.boundingBox.y2, this.boundingBox.x1, this.boundingBox.y1, 255, 0, 0);\r\n        }\r\n        if (this.panel && this.sprite && this.isActive) {\r\n            if (this.isAlive) {\r\n                this.panel.drawSprite(this.posX, this.posY, this.sprite, !this.facingForward);\r\n            } else {\r\n                if (this.explosionSprite) {\r\n                    this.panel.drawSprite(this.posX, this.posY, this.explosionSprite, false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    activate() {\r\n        if (this.active) return;\r\n\r\n        this.deactivationStart = null;\r\n        this.isActive = true;\r\n        this.isAlive = true;\r\n        this.screenSize = this.simulation.getScreenSize();\r\n        this.updateBoundingBox();\r\n    }\r\n\r\n    deactivate() {\r\n        if (!this.isActive) return;\r\n\r\n        this.isActive = false;\r\n        this.boundingBox = {\r\n            x1: -1,\r\n            y1: -1,\r\n            x2: -1,\r\n            y2: -1,\r\n        };\r\n        this.centerPoint = {\r\n            x: -1,\r\n            y: -1,\r\n        };\r\n    }\r\n\r\n    create() {\r\n        this.activate();\r\n    }\r\n\r\n    destroy() {\r\n        this.isAlive = false;\r\n        if (this.deactivationStart === null) {\r\n            this.deactivationStart = Date.now();\r\n        } else {\r\n            this.deactivate();\r\n        }\r\n    }\r\n\r\n    getPos() {\r\n        return { x: this.posX, y: this.posY };\r\n    }\r\n\r\n    setPos(x = 0, y = 0) {\r\n        this.posX = x <= this.screenSize.width ? x : 0;\r\n        this.posX = this.posX < 0 ? this.screenSize.width : this.posX;\r\n        this.posY = y <= this.screenSize.height ? y : 0;\r\n        this.posY = this.posY < 0 ? this.screenSize.height : this.posY;\r\n        this.updateBoundingBox();\r\n    }\r\n\r\n    getBoundingBox() {\r\n        return this.boundingBox;\r\n    }\r\n\r\n    resetBoundingBox() {\r\n        this.boundingBox = {\r\n            x1: -1,\r\n            y1: -1,\r\n            x2: -1,\r\n            y2: -1,\r\n        };\r\n        this.centerPoint = {\r\n            x: -1,\r\n            y: -1,\r\n        };\r\n    }\r\n\r\n    updateBoundingBox() {\r\n        if (this.sprite !== null && this.isActive) {\r\n            const frameWidth = this.sprite.frameWidth;\r\n            const frameHeight = this.sprite.frameHeight;\r\n            this.boundingBox = {\r\n                x1: this.posX,\r\n                y1: this.posY,\r\n                x2: this.posX + frameWidth - 1,\r\n                y2: this.posY + frameHeight - 1,\r\n            };\r\n            this.centerPoint = {\r\n                x: Math.floor((this.posX + frameWidth - 1) / 2),\r\n                y: Math.floor((this.posY + frameHeight - 1) / 2),\r\n            };\r\n        } else {\r\n            this.resetBoundingBox();\r\n        }\r\n    }\r\n\r\n    isColliding(object1) {\r\n        if (!this.isAlive) return false;\r\n        const bounds1 = object1.getBoundingBox();\r\n        const bounds2 = this.getBoundingBox();\r\n        let isColliding = false;\r\n        // check x\r\n        if ((bounds1.x1 >= bounds2.x1 && bounds1.x1 <= bounds2.x2) || (bounds1.x2 >= bounds2.x1 && bounds1.x2 <= bounds2.x2)) {\r\n            //check y\r\n            if ((bounds1.y1 >= bounds2.y1 && bounds1.y1 <= bounds2.y2) || (bounds1.y2 >= bounds2.y1 && bounds1.y2 <= bounds2.y2)) {\r\n                isColliding = true;\r\n                // console.info(\"collision\", this.type, object1.type);\r\n            }\r\n        }\r\n\r\n        return isColliding;\r\n    }\r\n\r\n    checkCollisions() {\r\n        let nearbyObjectsX = [];\r\n        const start = this.centerPoint.x - Math.ceil(this.sprite.frameWidth / 2);\r\n        const end = this.centerPoint.x + Math.ceil(this.sprite.frameWidth / 2);\r\n        for (let i = start; i < end; i++) {\r\n            // console.info(this.simulation.objectPositions.x[i]);\r\n            if (this.simulation.objectPositions.x[i]) {\r\n                const nearby = this.simulation.objectPositions.x[i].filter((object) => object.type !== this.type && this.isActive && object.isActive);\r\n                nearbyObjectsX = nearbyObjectsX.concat(nearby);\r\n            }\r\n        }\r\n        const colliding = nearbyObjectsX.filter((object) => this.isColliding(object) && this.isActive && object.isActive);\r\n        if (colliding.length > 0) {\r\n            this.handleCollisions(colliding);\r\n        }\r\n    }\r\n\r\n    handleCollisions(collisions) {}\r\n\r\n    setState(newState) {\r\n        this.state = newState;\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    getCenterPoint() {\r\n        return this.centerPoint;\r\n    }\r\n\r\n    getType() {\r\n        return this.type;\r\n    }\r\n\r\n    move() {}\r\n}\r\n\r\nmodule.exports = GameObject;\r\n\n\n//# sourceURL=webpack://led-testing/./objects/GameObject.js?");

/***/ }),

/***/ "./objects/Human.js":
/*!**************************!*\
  !*** ./objects/Human.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { EnemyStates } = __webpack_require__(/*! ../ships/EnemyShip */ \"./ships/EnemyShip.js\");\r\nconst Sprites = __webpack_require__(/*! ../sprites/Sprites */ \"./sprites/Sprites.js\");\r\nconst GameObject = __webpack_require__(/*! ./GameObject */ \"./objects/GameObject.js\");\r\n\r\nconst HumanStates = {\r\n    free: \"free\",\r\n    gettingCaptured: \"gettingCaptured\",\r\n    captured: \"captured\",\r\n    capturing: \"capturing\",\r\n    falling: \"falling\",\r\n    dead: \"dead\",\r\n};\r\n\r\nclass Human extends GameObject {\r\n    constructor(x, y, panel, sprite = Sprites.human, simulation) {\r\n        super(x, y, panel, sprite, simulation);\r\n        this.type = \"human\";\r\n        this.speedX = 0.1;\r\n        this.speedY = 1;\r\n        this.facingForward = this.speedX < 0;\r\n        this.isAlive = true;\r\n        this.capturingShip = null;\r\n        this.setState(HumanStates.free);\r\n    }\r\n\r\n    tick(time) {\r\n        super.tick(time);\r\n        // console.info(this.posX + this.sprite.frameHeight, this.simulation.getGroundLevel());\r\n        if (this.posY + this.sprite.frameHeight < this.simulation.getGroundLevel() && this.state === HumanStates.free) {\r\n            this.setState(HumanStates.falling);\r\n        }\r\n\r\n        if (this.posY + this.sprite.frameHeight >= this.simulation.getGroundLevel() && this.state === HumanStates.falling) {\r\n            this.posY = this.simulation.getGroundLevel() - 5;\r\n            this.setState(HumanStates.free);\r\n        }\r\n\r\n        if (this.state === HumanStates.capturing || this.state === HumanStates.captured) {\r\n            if (!this.capturingShip || !this.capturingShip.isAlive) {\r\n                this.setState(HumanStates.free);\r\n            }\r\n        }\r\n\r\n        switch (this.state) {\r\n            case HumanStates.captured:\r\n                const shipPos = this.capturingShip.getPos();\r\n                this.setPos(shipPos.x + 1, shipPos.y + 4);\r\n                break;\r\n            case HumanStates.capturing:\r\n            case HumanStates.free:\r\n                this.walk();\r\n                break;\r\n            case HumanStates.falling:\r\n                const nextY = this.posY + 0.75;\r\n                // if (nextY > this.simulation.getGroundLevel() + this.sprite.frameHeight) {\r\n                //     nextY = this.simulation.getGroundLevel() + this.sprite.frameHeight;\r\n                // }\r\n                this.setPos(this.posX, nextY);\r\n                // this.setState(HumanStates.free);\r\n                break;\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.setState(HumanStates.dead);\r\n        super.destroy();\r\n    }\r\n\r\n    walk() {\r\n        // console.info('walk human');\r\n        if (Math.random() > 0.99) {\r\n            this.speedX = this.speedX * -1;\r\n        }\r\n        this.setPos(this.posX + this.speedX, this.posY);\r\n    }\r\n\r\n    capture(capturingShip) {\r\n        if (this.state === HumanStates.capturing && this.isAlive) {\r\n            console.info(\"human | capture\");\r\n            this.setState(HumanStates.captured);\r\n            this.capturingShip = capturingShip;\r\n        }\r\n    }\r\n\r\n    capturing(capturingShip) {\r\n        if (this.state === HumanStates.free && this.isAlive) {\r\n            console.info(\"human | capturing\");\r\n            this.setState(HumanStates.capturing);\r\n            this.capturingShip = capturingShip;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    release() {\r\n        if (this.state !== HumanStates.free && this.isAlive) {\r\n            console.info(\"human | release\");\r\n            this.setState(HumanStates.falling);\r\n            this.capturingShip = null;\r\n        }\r\n    }\r\n\r\n    handleCollisions(collisions) {\r\n        super.handleCollisions(collisions);\r\n        for (let i = 0; i < collisions.length; i++) {\r\n            const collidingObject = collisions[i];\r\n            if (collidingObject.isAlive) {\r\n                switch (collidingObject.type) {\r\n                    case \"dropShip\":\r\n                        collidingObject.capture(this);\r\n                        this.capture(collidingObject);\r\n                        break;\r\n                    case \"bomb\":\r\n                        collidingObject.destroy();\r\n                        this.destroy();\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    setState(newState) {\r\n        console.info(`${this.type} | setState | ${newState}`);\r\n        super.setState(newState);\r\n    }\r\n}\r\n\r\nmodule.exports = Human;\r\n\n\n//# sourceURL=webpack://led-testing/./objects/Human.js?");

/***/ }),

/***/ "./objects/Star.js":
/*!*************************!*\
  !*** ./objects/Star.js ***!
  \*************************/
/***/ ((module) => {

eval("class Star {\r\n    constructor(x, y, panel) {\r\n        this.type = 'star';\r\n        this.posX = x;\r\n        this.posY = y;\r\n        this.panel = panel;\r\n        this.color = [55,55,55];\r\n        this.colors = [\r\n            [55, 55, 55],\r\n            [25, 25, 25],\r\n            [35, 35, 55],\r\n            [75, 75, 75]\r\n        ];\r\n\r\n        this.animate();\r\n    }\r\n\r\n    animate() {\r\n        const newColorIndex = Math.floor(Math.random()*this.colors.length);\r\n        this.color = this.colors[newColorIndex];\r\n\r\n    }\r\n\r\n    render() {\r\n        this.panel.setPixel(this.posX, this.posY, ...this.color);\r\n    }\r\n}\r\n\r\nmodule.exports = Star;\n\n//# sourceURL=webpack://led-testing/./objects/Star.js?");

/***/ }),

/***/ "./scenarios/BaseLevel.js":
/*!********************************!*\
  !*** ./scenarios/BaseLevel.js ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Scenario = __webpack_require__(/*! ./Scenario */ \"./scenarios/Scenario.js\");\r\nconst Simulation = __webpack_require__(/*! ../utils/Simulation */ \"./utils/Simulation.js\");\r\nconst Sprite = __webpack_require__(/*! ../sprites/Sprite */ \"./sprites/Sprite.js\");\r\n\r\nclass BaseLevel extends Scenario {\r\n    constructor(scenarioData, panel, screenSize, fonts, scenarioManager) {\r\n        super(scenarioData, panel, screenSize, fonts, scenarioManager);\r\n        this.title = \"Alien Invasion\";\r\n        this.ground = 0;\r\n        this.gameController1 = null;\r\n        this.backgroundSprite = null;\r\n        this.simulation = null;\r\n        this.autoStart = true;\r\n        this.startButtonPressed = false;\r\n        this.animationInterval = 1000 / 10;\r\n        this.movementInterval = 1000 / 120;\r\n        this.lastAnimTick = null;\r\n        this.lastMovementTick = null;\r\n        this.levelConfig = {\r\n            maxDropShips: 10,\r\n            maxBombers: 0,\r\n            totalHumans: 10,\r\n        };\r\n    }\r\n\r\n    start() {\r\n        super.start();\r\n        this.lastMovementTick = Date.now();\r\n        this.lastAnimTick = Date.now();\r\n        this.simulation = new Simulation(this.panel, this.screenSize, this.levelConfig);\r\n        this.simulation.isBrowserBased = this.scenarioManager.isBrowserBased;\r\n        this.backgroundSprite = new Sprite(Sprites.moonBackground);\r\n        this.ground = this.simulation.getGroundLevel();\r\n\r\n        this.simulation.start();\r\n    }\r\n\r\n    tick(time) {\r\n        super.tick(time);\r\n        const player1Lives = this.simulation.getPlayerLives(0);\r\n\r\n        if (player1Lives === 0) {\r\n            this.scenarioManager.changeScenario(\"endScreen\", {\r\n                score: this.simulation.score,\r\n            });\r\n        }\r\n\r\n        // handle animation tick interval\r\n        if (time - this.lastAnimTick >= this.animationInterval) {\r\n            this.simulation.animate(time);\r\n            this.lastAnimTick = time;\r\n        }\r\n\r\n        // handle sim tick interval\r\n        if (time - this.lastMovementTick >= this.movementInterval) {\r\n            this.simulation.tick(time);\r\n\r\n            this.lastMovementTick = time;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        super.render();\r\n        const player1Lives = this.simulation.getPlayerLives(0);\r\n        if (this.simulation.isRunning) {\r\n            // render stars\r\n\r\n            this.panel.drawSprite(100, 10, this.backgroundSprite);\r\n\r\n            this.simulation.renderBackground();\r\n\r\n            // draw simple ground\r\n            this.panel.drawLine(0, this.ground, this.screenSize.width, this.ground, 0, 255, 0);\r\n            this.panel.drawLine(0, this.ground + 1, this.screenSize.width, this.ground + 1, 0, 155, 0);\r\n            this.panel.drawLine(0, this.ground + 2, this.screenSize.width, this.ground + 2, 0, 55, 0);\r\n\r\n            // draw mountains\r\n            this.panel.drawMountain(27, this.ground - 1, 6, [50, 50, 0], [150, 150, 0]);\r\n            this.panel.drawMountain(10, this.ground, 10, [100, 100, 0], [255, 255, 0]);\r\n            this.panel.drawMountain(142, this.ground, 22, [100, 100, 0], [255, 255, 0]);\r\n\r\n            // render sim objects\r\n            this.simulation.render();\r\n\r\n            // draw UI\r\n            const score = this.simulation.getScore();\r\n\r\n            this.panel.drawText(1, 58, `Lives: ${player1Lives}`, this.fonts.uiFont, 255, 255, 255);\r\n            this.panel.drawText(40, 58, `Score: ${score}`, this.fonts.uiFont, 255, 255, 255);\r\n        }\r\n        if (this.simulation.isPaused) {\r\n            this.panel.drawText(40, 32, `Paused`, this.fonts.uiFont2, 255, 255, 255);\r\n        }\r\n    }\r\n\r\n    handleInput(data) {\r\n        super.handleInput(data);\r\n        if (this.simulation) {\r\n            this.simulation.handleInput(data);\r\n        }\r\n    }\r\n\r\n    handleStartButton(isPressed) {\r\n        if (this.simulation && isPressed) {\r\n            this.simulation.pause();\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = BaseLevel;\r\n\n\n//# sourceURL=webpack://led-testing/./scenarios/BaseLevel.js?");

/***/ }),

/***/ "./scenarios/EndScreen.js":
/*!********************************!*\
  !*** ./scenarios/EndScreen.js ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Scenario = __webpack_require__(/*! ./Scenario */ \"./scenarios/Scenario.js\");\r\n\r\nclass EndScreen extends Scenario {\r\n    constructor(scenarioData, panel, screenSize, fonts, scenarioManager) {\r\n        super(scenarioData, panel, screenSize, fonts, scenarioManager);\r\n        this.title = \"Game Over\";\r\n        this.secondsToDisplay = 5;\r\n        this.screenStartTime = null;\r\n    }\r\n\r\n    start() {\r\n        super.start();\r\n        this.screenStartTime = Date.now();\r\n    }\r\n\r\n    render() {\r\n        super.render();\r\n        this.panel.drawText(8, 12, `${this.title}`, this.fonts.scriptFont, 255, 50, 50);\r\n        this.panel.drawText(9, 11, `${this.title}`, this.fonts.scriptFont, 255, 255, 255);\r\n        this.panel.drawLine(7, 30, 120, 30, 255, 0, 0);\r\n        this.panel.drawText(40, 32, `Score ${this.scenarioData.score}`, this.fonts.uiFont2, 255, 255, 255);\r\n        this.panel.drawText(40, 42, `Press Start`, this.fonts.uiFont2, 255, 255, 255);\r\n    }\r\n\r\n    tick(time) {\r\n        super.tick(time);\r\n\r\n        // handle animation tick interval\r\n        if (time - this.screenStartTime >= this.secondsToDisplay * 1000) {\r\n            // this.simulation.animate(time);\r\n            this.scenarioManager.changeScenario(\"startScreen\");\r\n        }\r\n    }\r\n\r\n    handleStartButton(isPressed) {\r\n        if (isPressed) {\r\n            this.scenarioManager.changeScenario(\"gameLoop\");\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = EndScreen;\r\n\n\n//# sourceURL=webpack://led-testing/./scenarios/EndScreen.js?");

/***/ }),

/***/ "./scenarios/Scenario.js":
/*!*******************************!*\
  !*** ./scenarios/Scenario.js ***!
  \*******************************/
/***/ ((module) => {

eval("class Scenario {\r\n    constructor(scenarioData, panel, screenSize, fonts, scenarioManager) {\r\n        this.scenarioData = scenarioData;\r\n        this.scenarioManager = scenarioManager;\r\n        this.panel = panel;\r\n        this.screenSize = screenSize;\r\n        this.fonts = fonts;\r\n        this.running = false;\r\n    }\r\n\r\n    start() {\r\n        this.running = true;\r\n    }\r\n\r\n    stop() {\r\n        this.running = false;\r\n    }\r\n\r\n    tick(time) {}\r\n\r\n    render() {}\r\n\r\n    handleInput(data) {}\r\n\r\n    handleStartButton(isPressed) {}\r\n\r\n    isRunning() {\r\n        return this.running;\r\n    }\r\n}\r\n\r\nmodule.exports = Scenario;\r\n\n\n//# sourceURL=webpack://led-testing/./scenarios/Scenario.js?");

/***/ }),

/***/ "./scenarios/ScenarioManager.js":
/*!**************************************!*\
  !*** ./scenarios/ScenarioManager.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const EndScreen = __webpack_require__(/*! ./EndScreen */ \"./scenarios/EndScreen.js\");\r\nconst BaseLevel = __webpack_require__(/*! ./BaseLevel */ \"./scenarios/BaseLevel.js\");\r\nconst StartScreen = __webpack_require__(/*! ./StartScreen */ \"./scenarios/StartScreen.js\");\r\n\r\nclass ScenarioManager {\r\n    constructor(panel, screenSize, fonts, isBrowserBased) {\r\n        this.isBrowserBased = isBrowserBased;\r\n        this.panel = panel;\r\n        this.screenSize = screenSize;\r\n        this.fonts = fonts;\r\n\r\n        this.currentScenario = null;\r\n    }\r\n\r\n    start() {\r\n        if (this.currentScenario !== null && !this.currentScenario.isRunning()) {\r\n            this.currentScenario.start();\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        if (this.currentScenario !== null && this.currentScenario.isRunning()) {\r\n            this.currentScenario.stop();\r\n        }\r\n    }\r\n\r\n    changeScenario(newScenario, scenarioData) {\r\n        if (this.currentScenario !== null) {\r\n            this.currentScenario.stop();\r\n        }\r\n        let scenarioClass = null;\r\n        switch (newScenario) {\r\n            case \"startScreen\":\r\n                scenarioClass = StartScreen;\r\n                break;\r\n            case \"endScreen\":\r\n                scenarioClass = EndScreen;\r\n                break;\r\n\r\n            case \"gameLoop\":\r\n                scenarioClass = BaseLevel;\r\n                break;\r\n        }\r\n        if (this.scenarioClass !== null) {\r\n            this.currentScenario = new scenarioClass(scenarioData, this.panel, this.screenSize, this.fonts, this);\r\n        }\r\n        if (this.currentScenario !== null) {\r\n            this.currentScenario.start();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.currentScenario !== null) {\r\n            this.currentScenario.render();\r\n        }\r\n    }\r\n\r\n    tick(time) {\r\n        if (this.currentScenario !== null && this.currentScenario.isRunning()) {\r\n            this.currentScenario.tick(time);\r\n        }\r\n    }\r\n\r\n    handleInput(data) {\r\n        if (this.currentScenario !== null) {\r\n            this.currentScenario.handleInput(data);\r\n        }\r\n    }\r\n\r\n    handleStartButton(isPressed) {\r\n        if (this.currentScenario !== null) {\r\n            this.currentScenario.handleStartButton(isPressed);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = ScenarioManager;\r\n\n\n//# sourceURL=webpack://led-testing/./scenarios/ScenarioManager.js?");

/***/ }),

/***/ "./scenarios/StartScreen.js":
/*!**********************************!*\
  !*** ./scenarios/StartScreen.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Scenario = __webpack_require__(/*! ./Scenario */ \"./scenarios/Scenario.js\");\r\n\r\nclass StartScreen extends Scenario {\r\n    constructor(scenarioData, panel, screenSize, fonts, scenarioManager) {\r\n        super(scenarioData, panel, screenSize, fonts, scenarioManager);\r\n        this.title = \"Alien Invasion\";\r\n    }\r\n\r\n    render() {\r\n        super.render();\r\n        this.panel.drawText(8, 12, `${this.title}`, this.fonts.scriptFont, 255, 50, 50);\r\n        this.panel.drawText(9, 11, `${this.title}`, this.fonts.scriptFont, 255, 255, 255);\r\n        this.panel.drawLine(7, 30, 120, 30, 255, 0, 0);\r\n        this.panel.drawText(40, 32, `Press Start`, this.fonts.uiFont2, 255, 255, 255);\r\n    }\r\n\r\n    handleStartButton(isPressed) {\r\n        if (isPressed) {\r\n            this.scenarioManager.changeScenario(\"gameLoop\");\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = StartScreen;\r\n\n\n//# sourceURL=webpack://led-testing/./scenarios/StartScreen.js?");

/***/ }),

/***/ "./ships/BaseShip.js":
/*!***************************!*\
  !*** ./ships/BaseShip.js ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const GameObject = __webpack_require__(/*! ../objects/GameObject */ \"./objects/GameObject.js\");\r\nconst Utils = __webpack_require__(/*! ../utils/Functions */ \"./utils/Functions.js\");\r\n\r\nclass BaseShip extends GameObject {\r\n    constructor(x, y, panel, sprite, simulation) {\r\n        super(x, y, panel, sprite, simulation);\r\n        this.speedX = 0;\r\n        this.speedY = 0;\r\n        this.speedMultiplierX = 1;\r\n        this.speedMultiplierY = 1;\r\n        this.isCrossDown = false;\r\n\r\n        this.isPressed = {\r\n            triangle: false,\r\n            circle: false,\r\n            square: false,\r\n            cross: false,\r\n        };\r\n    }\r\n\r\n    handleLeftAnalog(x, y) {\r\n        if (this.simulation.isBrowserBased) {\r\n            this.setSpeed(x, y);\r\n        } else {\r\n            let analogX = Utils.normalize(x, 0, 255).toPrecision(1);\r\n            analogX = (analogX - 0.5).toPrecision(1) * this.speedMultiplierX;\r\n\r\n            let analogY = Utils.normalize(y, 0, 255).toPrecision(1);\r\n            analogY = (analogY - 0.5).toPrecision(1) * this.speedMultiplierY;\r\n\r\n            // console.info(\"setSpeed\", x, y, analogX, analogY);\r\n            this.setSpeed(analogX, analogY);\r\n        }\r\n    }\r\n\r\n    handleButtons(buttons) {\r\n        const buttonKeys = Object.keys(buttons);\r\n\r\n        for (let i = 0; i < buttonKeys.length; i++) {\r\n            const button = buttonKeys[i];\r\n            const buttonValue = buttons[button];\r\n\r\n            if (buttonValue > 10) {\r\n                if (!this.isPressed[button]) {\r\n                    switch (button) {\r\n                        case \"triangle\":\r\n                            this.handleTriangleButton(buttonValue);\r\n                            break;\r\n                        case \"circle\":\r\n                            this.handleCircleButton(buttonValue);\r\n                            break;\r\n                        case \"square\":\r\n                            this.handleSquareButton(buttonValue);\r\n                            break;\r\n                        case \"cross\":\r\n                            this.handleCrossButton(buttonValue);\r\n                            break;\r\n                    }\r\n                    this.isPressed[button] = true;\r\n                }\r\n            } else {\r\n                switch (button) {\r\n                    case \"triangle\":\r\n                        this.handleTriangleButton(0);\r\n                        break;\r\n                    case \"circle\":\r\n                        this.handleCircleButton(0);\r\n                        break;\r\n                    case \"square\":\r\n                        this.handleSquareButton(0);\r\n                        break;\r\n                    case \"cross\":\r\n                        this.handleCrossButton(0);\r\n                        break;\r\n                }\r\n                this.isPressed[button] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    handleTriangleButton(buttonValue) {\r\n        // console.info('triangle', buttonValue);\r\n    }\r\n\r\n    handleCircleButton(buttonValue) {\r\n        // console.info('circle', buttonValue);\r\n    }\r\n\r\n    handleSquareButton(buttonValue) {\r\n        // console.info('square', buttonValue);\r\n    }\r\n\r\n    handleCrossButton(buttonValue) {\r\n        // console.info('cross', buttonValue);\r\n    }\r\n\r\n    move() {\r\n        if (this.isAlive) {\r\n            this.setPos(this.posX + this.speedX, this.posY + this.speedY);\r\n        }\r\n    }\r\n\r\n    setSpeed(speedX, speedY) {\r\n        this.speedX = speedX;\r\n        this.speedY = speedY;\r\n    }\r\n\r\n    createLaser(x, y, panel, sprite, speedX = 0, speedY = 0) {\r\n        this.simulation.createLaser(x, y, panel, sprite, speedX, speedY);\r\n    }\r\n\r\n    createBomb(x, y, panel, sprite, speedX = 0, speedY = 0) {\r\n        this.simulation.createBomb(x, y, panel, sprite, speedX, speedY);\r\n    }\r\n\r\n    animate(time) {\r\n        super.animate(time);\r\n    }\r\n\r\n    tick(time) {\r\n        super.tick(time);\r\n        if (this.speedX !== 0) {\r\n            this.facingForward = this.speedX > 0;\r\n        }\r\n        if (this.isActive) {\r\n            this.move();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        super.render();\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n    }\r\n\r\n    destroy() {\r\n        super.destroy();\r\n    }\r\n}\r\n\r\nmodule.exports = BaseShip;\r\n\n\n//# sourceURL=webpack://led-testing/./ships/BaseShip.js?");

/***/ }),

/***/ "./ships/Bomber.js":
/*!*************************!*\
  !*** ./ships/Bomber.js ***!
  \*************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { EnemyShip, EnemyStates } = __webpack_require__(/*! ./EnemyShip */ \"./ships/EnemyShip.js\");\r\nconst Sprites = __webpack_require__(/*! ../sprites/Sprites */ \"./sprites/Sprites.js\");\r\nconst Sprite = __webpack_require__(/*! ../sprites/Sprite */ \"./sprites/Sprite.js\");\r\n\r\nclass Bomber extends EnemyShip {\r\n    constructor(x, y, panel, sprite, simulation) {\r\n        super(x, y, panel, sprite, simulation);\r\n        this.type = \"bomber\";\r\n        this.sprite = new Sprite(Sprites.enemies.bomber.ship);\r\n        this.explosionSprite = new Sprite(Sprites.enemies.bomber.explosion);\r\n        this.deactivationTimeout = 500;\r\n        this.bombTimeout = 500;\r\n        this.bombTick = 400;\r\n        this.score = 500;\r\n    }\r\n\r\n    tick(time) {\r\n        super.tick(time);\r\n        // this.createLaser(startX, startY, this.panel, Sprites.player.defaultShip.projectile, speedX, 0);\r\n        if (this.bombTick >= this.bombTimeout) {\r\n            this.dropBomb();\r\n            this.bombTick = 0;\r\n        } else {\r\n            this.bombTick++;\r\n        }\r\n    }\r\n    animate(time) {\r\n        super.animate(time);\r\n        // this.dropBomb();\r\n    }\r\n\r\n    dropBomb() {\r\n        const currPos = this.getPos();\r\n        const startX = currPos.x;\r\n        const startY = currPos.y + 3;\r\n        this.createBomb(startX, startY, this.panel, Sprites.enemies.bomber.projectile, 0, 0.1);\r\n    }\r\n\r\n    move() {\r\n        this.setPos(this.posX + this.speedX, this.posY);\r\n    }\r\n}\r\n\r\nmodule.exports = Bomber;\r\n\n\n//# sourceURL=webpack://led-testing/./ships/Bomber.js?");

/***/ }),

/***/ "./ships/DropShip.js":
/*!***************************!*\
  !*** ./ships/DropShip.js ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { EnemyShip, EnemyStates } = __webpack_require__(/*! ./EnemyShip */ \"./ships/EnemyShip.js\");\r\nconst Sprites = __webpack_require__(/*! ../sprites/Sprites */ \"./sprites/Sprites.js\");\r\nconst Sprite = __webpack_require__(/*! ../sprites/Sprite */ \"./sprites/Sprite.js\");\r\n\r\nclass DropShip extends EnemyShip {\r\n    constructor(x, y, panel, sprite, simulation) {\r\n        super(x, y, panel, sprite, simulation);\r\n        this.type = \"dropShip\";\r\n        this.humanToCapture = null;\r\n        this.sprite = new Sprite(Sprites.enemies.dropShip.ship);\r\n        this.explosionSprite = new Sprite(Sprites.enemies.dropShip.explosion);\r\n        this.deactivationTimeout = 240;\r\n    }\r\n\r\n    tick(time) {\r\n        super.tick(time);\r\n        if (this.posY >= 58 && this.isAlive) {\r\n            this.destroy();\r\n        }\r\n        if (this.humanToCapture !== null) {\r\n            if (this.posY < 0 && this.state == EnemyStates.captured) {\r\n                this.humanToCapture.destroy();\r\n                this.destroy();\r\n            }\r\n        }\r\n\r\n        for (let h = 0; h < this.simulation.humans.length; h++) {\r\n            const human = this.simulation.humans[h];\r\n            const humanPos = human.getPos();\r\n            const enemyPos = this.getPos();\r\n            const distanceY = humanPos.y - enemyPos.y;\r\n            const distanceX = humanPos.x - enemyPos.x;\r\n\r\n            if (distanceX < 10 && distanceX > -10 && this.isActive && human.isActive) {\r\n                if (this.state == \"free\" && human.getState() == \"free\") {\r\n                    if (human.capturing(this)) {\r\n                        this.capturing(human);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.setState(EnemyStates.dead);\r\n        super.destroy();\r\n    }\r\n\r\n    move() {\r\n        if (this.isAlive) {\r\n            switch (this.state) {\r\n                case EnemyStates.free:\r\n                    this.setPos(this.posX, this.posY + this.speedY);\r\n                    break;\r\n\r\n                case EnemyStates.capturing:\r\n                    this.setPos(this.posX, this.posY + this.speedY);\r\n                    this.trackHuman();\r\n                    break;\r\n\r\n                case EnemyStates.captured:\r\n                    this.setPos(this.posX, this.posY - this.speedY);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    trackHuman() {\r\n        if (this.state == EnemyStates.capturing && this.isAlive && this.isActive) {\r\n            const humanPos = this.humanToCapture.getPos();\r\n            if (this.posX < humanPos.x) {\r\n                this.setPos(this.posX + this.speedX, this.posY);\r\n            }\r\n            if (this.posX > humanPos.x) {\r\n                this.setPos(this.posX - this.speedX, this.posY);\r\n            }\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        if (this.isAlive) {\r\n            super.destroy();\r\n            this.release();\r\n        }\r\n    }\r\n\r\n    capturing(human) {\r\n        if (this.state !== EnemyStates.capturing && this.isAlive && this.isActive) {\r\n            console.info(\"enemy | capturing\");\r\n            super.capturing(human);\r\n            this.humanToCapture = human;\r\n        }\r\n    }\r\n\r\n    capture(human) {\r\n        if (this.state !== EnemyStates.captured && this.isAlive && this.isActive) {\r\n            console.info(\"enemy | capture\");\r\n            super.capture(human);\r\n            this.humanToCapture = human;\r\n        }\r\n    }\r\n\r\n    release() {\r\n        super.release();\r\n        if (this.humanToCapture !== null) {\r\n            console.info(\"enemy | release\");\r\n            this.humanToCapture.release();\r\n            this.humanToCapture = null;\r\n        }\r\n    }\r\n\r\n    setState(newState) {\r\n        console.info(`${this.type} | setState | ${newState}`);\r\n        super.setState(newState);\r\n    }\r\n}\r\n\r\nmodule.exports = DropShip;\r\n\n\n//# sourceURL=webpack://led-testing/./ships/DropShip.js?");

/***/ }),

/***/ "./ships/EnemyShip.js":
/*!****************************!*\
  !*** ./ships/EnemyShip.js ***!
  \****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const BaseShip = __webpack_require__(/*! ./BaseShip */ \"./ships/BaseShip.js\");\r\n\r\nconst EnemyStates = {\r\n    free: \"free\",\r\n    capturing: \"capturing\",\r\n    captured: \"captured\",\r\n    dead: \"dead\",\r\n};\r\n\r\nclass EnemyShip extends BaseShip {\r\n    constructor(x, y, panel, sprite, simulation) {\r\n        super(x, y, panel, sprite, simulation);\r\n        this.type = \"enemyShip\";\r\n        this.speedX = 0.05;\r\n        this.speedY = 0.05;\r\n        this.score = 100;\r\n        this.setState(EnemyStates.free);\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n    }\r\n\r\n    tick(time) {\r\n        super.tick(time);\r\n        if (this.posY + this.sprite.frameHeight >= this.simulation.getGroundLevel() && this.isAlive) {\r\n            this.destroy();\r\n        }\r\n    }\r\n\r\n    setPos(x = 0, y = 0) {\r\n        this.posX = x <= this.screenSize.width ? x : 0;\r\n        this.posY = y;\r\n    }\r\n\r\n    capturing(object) {\r\n        if (this.isActive) {\r\n            this.setState(EnemyStates.capturing);\r\n        }\r\n    }\r\n\r\n    capture(object) {\r\n        if (this.isActive) {\r\n            this.setState(EnemyStates.captured);\r\n        }\r\n    }\r\n\r\n    release() {\r\n        this.setState(EnemyStates.free);\r\n    }\r\n\r\n    handleCollisions(collisions) {\r\n        super.handleCollisions(collisions);\r\n        for (let i = 0; i < collisions.length; i++) {\r\n            const collidingObject = collisions[i];\r\n            if (collidingObject.isAlive) {\r\n                switch (collidingObject.type) {\r\n                    case \"laser\":\r\n                        collidingObject.destroy();\r\n                        this.simulation.addScore(this.score);\r\n                        this.destroy();\r\n                        break;\r\n                    case \"playerShip\":\r\n                        collidingObject.destroy();\r\n                        this.simulation.removeScore(1000);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = { EnemyShip, EnemyStates };\r\n\n\n//# sourceURL=webpack://led-testing/./ships/EnemyShip.js?");

/***/ }),

/***/ "./ships/SpaceShip.js":
/*!****************************!*\
  !*** ./ships/SpaceShip.js ***!
  \****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const BaseShip = __webpack_require__(/*! ./BaseShip */ \"./ships/BaseShip.js\");\r\nconst Sprites = __webpack_require__(/*! ../sprites/Sprites */ \"./sprites/Sprites.js\");\r\nconst Sprite = __webpack_require__(/*! ../sprites/Sprite */ \"./sprites/Sprite.js\");\r\n\r\nclass SpaceShip extends BaseShip {\r\n    constructor(x, y, panel, sprite, simulation) {\r\n        super(x, y, panel, sprite, simulation);\r\n        this.type = \"playerShip\";\r\n        this.engineColor = [100, 100, 100];\r\n        this.flameColor1 = [255, 255, 0];\r\n        this.flameColor2 = [100, 100, 0];\r\n        this.engineState = null;\r\n        this.frameWidth = this.sprite.frameWidth;\r\n        this.speedMultiplierX = 2;\r\n        this.speedMultiplierY = 0.75;\r\n        this.projectileSpeed = 2;\r\n        this.lives = 3;\r\n        this.explosionSprite = new Sprite(Sprites.player.defaultShip.explosion);\r\n        this.shieldEnabled = false;\r\n    }\r\n\r\n    animate(time) {\r\n        super.animate(time);\r\n        this.engineState = this.engineState === \"alt1\" ? \"alt2\" : \"alt1\";\r\n    }\r\n\r\n    tick(time) {\r\n        super.tick(time);\r\n    }\r\n\r\n    restart() {\r\n        this.lives = 3;\r\n        this.create();\r\n    }\r\n\r\n    getLives() {\r\n        return this.lives;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.setPos(20, 20);\r\n    }\r\n\r\n    destroy() {\r\n        super.destroy();\r\n        this.lives = this.lives - 1;\r\n    }\r\n\r\n    setPos(x = 0, y = 0) {\r\n        this.posX = x <= this.screenSize.width ? x : 0;\r\n        this.posX = this.posX < 0 ? this.screenSize.width : this.posX;\r\n        this.posY = y <= this.screenSize.height ? y : 0;\r\n        this.posY = this.posY < 0 ? 0 : this.posY;\r\n        if (this.posY + this.sprite.frameHeight >= this.simulation.getGroundLevel() && this.isAlive) {\r\n            this.posY = this.simulation.getGroundLevel() - this.sprite.frameHeight;\r\n        }\r\n        this.updateBoundingBox();\r\n    }\r\n\r\n    handleSquareButton(buttonValue) {\r\n        this.shieldEnabled = buttonValue > 50;\r\n    }\r\n\r\n    handleCrossButton(buttonValue) {\r\n        if (buttonValue < 10) return;\r\n        super.handleCrossButton(buttonValue);\r\n        const currPos = this.getPos();\r\n        const startX = !this.facingForward ? currPos.x : currPos.x + this.frameWidth - 2;\r\n        const startY = currPos.y + 3;\r\n        const speedX = this.facingForward ? this.projectileSpeed : this.projectileSpeed * -1;\r\n        this.createLaser(startX, startY, this.panel, Sprites.player.defaultShip.projectile, speedX, 0);\r\n    }\r\n\r\n    drawShield() {\r\n        const radius = this.sprite.frameWidth / 2;\r\n        const x = this.posX + this.sprite.frameWidth / 2;\r\n        const y = this.posY + this.sprite.frameHeight / 2;\r\n        this.panel.drawCircle(x, y, radius, 0, 0, 55);\r\n        this.panel.drawCircle(x, y, radius + 1, 50, 50, 255);\r\n        this.panel.drawCircle(x, y, radius + 2, 150, 150, 255);\r\n    }\r\n\r\n    render() {\r\n        super.render();\r\n        if (this.panel && this.isActive) {\r\n            if (this.shieldEnabled) {\r\n                this.drawShield();\r\n            }\r\n            if (!this.facingForward) {\r\n                if (this.engineState === \"alt1\") {\r\n                    this.panel.setPixel(this.posX + this.frameWidth + 1, this.posY + 2, ...this.flameColor1);\r\n                    this.panel.setPixel(this.posX + this.frameWidth + 1, this.posY + 3, ...this.flameColor2);\r\n                    this.panel.setPixel(this.posX + this.frameWidth + 2, this.posY + 3, ...this.flameColor2);\r\n                } else {\r\n                    this.panel.setPixel(this.posX + this.frameWidth + 1, this.posY + 2, ...this.flameColor1);\r\n                    this.panel.setPixel(this.posX + this.frameWidth + 1, this.posY + 3, ...this.flameColor2);\r\n                    this.panel.setPixel(this.posX + this.frameWidth + 2, this.posY + 2, ...this.flameColor2);\r\n                }\r\n            } else {\r\n                if (this.engineState === \"alt1\") {\r\n                    this.panel.setPixel(this.posX - 1, this.posY + 2, ...this.flameColor1);\r\n                    this.panel.setPixel(this.posX - 1, this.posY + 3, ...this.flameColor2);\r\n                    this.panel.setPixel(this.posX - 2, this.posY + 3, ...this.flameColor2);\r\n                } else {\r\n                    this.panel.setPixel(this.posX - 1, this.posY + 2, ...this.flameColor1);\r\n                    this.panel.setPixel(this.posX - 1, this.posY + 3, ...this.flameColor2);\r\n                    this.panel.setPixel(this.posX - 2, this.posY + 2, ...this.flameColor2);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = SpaceShip;\r\n\n\n//# sourceURL=webpack://led-testing/./ships/SpaceShip.js?");

/***/ }),

/***/ "./ships/projectiles/Bomb.js":
/*!***********************************!*\
  !*** ./ships/projectiles/Bomb.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Projectile = __webpack_require__(/*! ./Projectile */ \"./ships/projectiles/Projectile.js\");\r\nconst GameObject = __webpack_require__(/*! ../../objects/GameObject */ \"./objects/GameObject.js\");\r\nconst Sprites = __webpack_require__(/*! ../../sprites/Sprites */ \"./sprites/Sprites.js\");\r\nconst Sprite = __webpack_require__(/*! ../../sprites/Sprite */ \"./sprites/Sprite.js\");\r\n\r\nclass Bomb extends Projectile {\r\n    constructor(x, y, panel, sprite, speedX = 0, speedY = 0, simulation) {\r\n        super(x, y, panel, sprite, speedX, speedY, simulation);\r\n        this.type = \"bomb\";\r\n        this.tickLife = 30000;\r\n        this.deactivationTimeout = 400;\r\n        this.sprite = new Sprite(Sprites.enemies.bomber.projectile);\r\n        this.explosionSprite = new Sprite(Sprites.enemies.bomber.explosion);\r\n    }\r\n\r\n    tick(time) {\r\n        super.tick(time);\r\n        if (this.posY + this.sprite.frameHeight >= this.simulation.getGroundLevel() && this.isAlive) {\r\n            this.destroy();\r\n        }\r\n    }\r\n\r\n    move() {\r\n        super.move();\r\n        if (this.isAlive) {\r\n            this.setPos(this.posX, this.posY + this.speedY);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Bomb;\r\n\n\n//# sourceURL=webpack://led-testing/./ships/projectiles/Bomb.js?");

/***/ }),

/***/ "./ships/projectiles/Laser.js":
/*!************************************!*\
  !*** ./ships/projectiles/Laser.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Projectile = __webpack_require__(/*! ./Projectile */ \"./ships/projectiles/Projectile.js\");\r\nconst GameObject = __webpack_require__(/*! ../../objects/GameObject */ \"./objects/GameObject.js\");\r\n\r\nclass Laser extends Projectile {\r\n    constructor(x, y, panel, sprite, speedX = 0, speedY = 0, simulation) {\r\n        super(x, y, panel, sprite, speedX, speedY, simulation);\r\n        this.type = \"laser\";\r\n        this.facingForward = this.speedX > 0;\r\n    }\r\n\r\n    tick(time) {\r\n        super.tick(time);\r\n    }\r\n\r\n    move() {\r\n        this.setPos(this.posX + this.speedX, this.posY);\r\n    }\r\n\r\n    handleCollisions(collisions) {\r\n        super.handleCollisions(collisions);\r\n        for (let i = 0; i < collisions.length; i++) {\r\n            const collidingObject = collisions[i];\r\n            if (collidingObject.isAlive) {\r\n                switch (collidingObject.type) {\r\n                    case \"bomb\":\r\n                        collidingObject.destroy();\r\n                        this.destroy();\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Laser;\r\n\n\n//# sourceURL=webpack://led-testing/./ships/projectiles/Laser.js?");

/***/ }),

/***/ "./ships/projectiles/Projectile.js":
/*!*****************************************!*\
  !*** ./ships/projectiles/Projectile.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const GameObject = __webpack_require__(/*! ../../objects/GameObject */ \"./objects/GameObject.js\");\r\n\r\nclass Projectile extends GameObject {\r\n    constructor(x, y, panel, sprite, speedX = 0, speedY = 0, simulation) {\r\n        super(x, y, panel, sprite, simulation);\r\n        this.type = \"projectile\";\r\n        this.speedX = speedX;\r\n        this.speedY = speedY;\r\n        this.created = Date.now();\r\n        this.tickLife = 300;\r\n        this.facingForward = this.speedX <= 0;\r\n        this.isAlive = true;\r\n    }\r\n\r\n    setPos(x = 0, y = 0) {\r\n        super.setPos(x, y);\r\n    }\r\n\r\n    tick(time) {\r\n        super.tick(time);\r\n        if (time - this.created > this.tickLife) {\r\n            this.deactivate();\r\n        }\r\n        if (this.isActive) {\r\n            this.move();\r\n        }\r\n    }\r\n\r\n    move() {\r\n        super.move();\r\n    }\r\n}\r\n\r\nmodule.exports = Projectile;\r\n\n\n//# sourceURL=webpack://led-testing/./ships/projectiles/Projectile.js?");

/***/ }),

/***/ "./sprites/Explosion2.js":
/*!*******************************!*\
  !*** ./sprites/Explosion2.js ***!
  \*******************************/
/***/ ((module) => {

eval("const Explosion2 = {\"id\":\"cdd7bb35\",\"name\":\"Explosion2\",\"speed\":67,\"loop\":true,\"frameWidth\":10,\"frameHeight\":10,\"frames\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,5,6,7,6,6,0,0,0,0,0,8,9,5,10,11,0,0,0,0,0,8,6,1,10,1,12,0,0,0,0,6,13,14,10,15,8,0,0,0,0,0,16,2,6,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,6,3,5,0,0,0,0,0,5,17,18,19,12,5,0,0,0,0,19,14,9,18,10,9,8,0,8,19,19,1,20,2,1,10,6,0,3,19,5,16,1,1,1,10,12,4,3,12,10,1,1,1,4,1,9,12,12,18,1,18,1,20,19,9,21,8,16,12,9,7,20,22,1,1,12,0,0,0,21,10,22,21,22,22,3,0,0,0,16,6,11,16,6,3,5,0],[0,5,23,24,24,25,25,25,5,0,0,17,26,21,21,27,27,26,23,0,5,26,13,13,28,15,29,27,26,24,24,21,28,29,18,5,14,28,26,24,24,30,13,15,11,5,10,29,26,4,17,26,22,18,1,5,5,1,9,17,17,27,7,5,1,9,18,1,13,25,17,22,29,15,14,15,1,14,27,17,23,26,27,27,27,21,9,22,30,23,0,0,17,25,17,24,25,17,23,0],[0,0,20,18,17,17,18,3,0,0,0,6,15,12,26,12,12,18,6,5,3,15,12,30,19,9,21,26,15,3,3,15,26,21,19,30,19,26,13,24,24,9,21,21,12,26,26,19,26,17,12,26,21,7,29,26,30,13,12,17,17,7,12,21,19,30,30,26,9,4,4,9,7,26,21,26,19,2,12,1,0,24,12,19,19,12,12,3,20,0,0,0,5,4,2,3,5,0,0,5],[0,0,0,16,2,11,5,0,0,0,0,16,2,13,6,2,12,24,10,0,0,25,19,7,30,30,12,13,17,0,24,13,19,19,30,30,30,12,19,24,7,13,26,26,26,12,13,30,12,13,18,21,21,26,26,7,7,26,7,9,2,9,13,12,19,21,21,21,12,17,16,13,13,21,26,30,19,13,19,3,0,4,25,12,17,19,15,2,3,0,0,0,5,2,29,15,11,16,0,0],[0,0,0,24,12,12,24,5,0,0,0,4,12,19,12,18,9,26,16,0,0,17,9,12,30,26,12,19,6,0,8,9,21,30,13,9,26,9,15,11,18,12,30,30,9,7,26,21,15,2,6,12,26,30,26,21,13,30,9,2,11,9,13,21,30,21,19,26,29,2,16,26,21,21,26,13,12,26,12,5,0,23,12,9,21,12,9,17,0,0,0,0,3,7,2,7,2,0,0,0],[0,5,23,24,24,25,25,25,5,0,0,17,26,21,21,27,27,26,23,0,5,26,13,13,28,15,29,27,26,24,24,21,28,29,18,5,14,28,26,24,24,30,13,15,11,5,10,29,26,4,17,26,22,18,1,5,5,1,9,17,17,27,7,5,1,9,18,1,13,25,17,22,29,15,14,15,1,14,27,17,23,26,27,27,27,21,9,22,30,23,0,0,17,25,17,24,25,17,23,0],[0,0,0,1,6,3,5,0,0,0,0,0,5,17,18,19,12,5,0,0,0,0,19,14,9,18,10,9,8,0,8,19,19,1,20,2,1,10,6,0,3,19,5,16,1,1,1,10,12,4,3,12,10,1,1,1,4,1,9,12,12,18,1,18,1,20,19,9,21,8,16,12,9,7,20,22,1,1,12,0,0,0,21,10,22,21,22,22,3,0,0,0,16,6,11,16,6,3,5,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,3,8,0,0,0,0,0,0,3,6,2,12,0,0,0,0,0,4,2,5,1,14,6,0,0,0,0,6,14,10,10,20,3,0,0,0,0,16,13,20,14,13,5,0,0,0,0,0,1,16,12,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,11,0,0,0,0,0,0,16,9,14,10,13,4,0,0,0,0,18,9,4,5,15,7,0,0,0,0,16,2,10,18,13,5,0,0,0,0,0,1,18,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,2,5,0,0,0,0,0,0,11,7,14,2,0,0,0,0,0,0,0,11,2,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,4,0,0,0,0,0,0,0,0,2,7,0,0,0,0,0,0,0,0,5,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],\"pallette\":[\"0,0,0\",\"250,250,250\",\"240,200,130\",\"250,190,160\",\"250,230,220\",\"250,240,240\",\"250,180,110\",\"250,210,100\",\"250,210,180\",\"250,210,80\",\"250,250,220\",\"250,210,160\",\"240,170,70\",\"240,200,60\",\"250,250,190\",\"250,250,160\",\"250,220,200\",\"230,150,100\",\"250,220,140\",\"240,170,40\",\"250,230,180\",\"240,150,30\",\"250,180,20\",\"240,190,180\",\"240,170,140\",\"230,120,70\",\"240,130,20\",\"250,200,20\",\"240,240,70\",\"240,250,110\",\"230,100,10\"]}; module.exports = Explosion2;\n\n//# sourceURL=webpack://led-testing/./sprites/Explosion2.js?");

/***/ }),

/***/ "./sprites/GenericExplosion.js":
/*!*************************************!*\
  !*** ./sprites/GenericExplosion.js ***!
  \*************************************/
/***/ ((module) => {

eval("const DropShip = {\"id\":\"042a81f0\",\"name\":\"DropShip\",\"speed\":200,\"loop\":true,\"frameWidth\":7,\"frameHeight\":6,\"frames\":[[0,0,0,0,2,0,0,0,1,0,3,0,0,0,0,0,3,1,3,1,0,0,1,0,3,1,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,2],[4,0,0,0,4,2,2,0,1,2,3,0,0,0,0,0,3,4,3,1,0,0,4,0,3,4,0,0,4,0,0,0,0,4,0,0,1,0,0,0,0,2],[1,0,0,0,1,1,2,0,4,0,2,0,0,0,0,0,2,0,2,4,0,0,2,2,2,0,0,0,4,0,4,0,0,4,0,0,4,0,0,0,0,1]],\"pallette\":[\"0,0,0\",\"255,0,0\",\"100,100,0\",\"255,255,0\",\"258,179,0\"]}; module.exports = DropShip;\n\n//# sourceURL=webpack://led-testing/./sprites/GenericExplosion.js?");

/***/ }),

/***/ "./sprites/Human.js":
/*!**************************!*\
  !*** ./sprites/Human.js ***!
  \**************************/
/***/ ((module) => {

eval("const Human = {\"id\":\"33d09683\",\"name\":\"Human\",\"speed\":67,\"loop\":true,\"frameWidth\":3,\"frameHeight\":5,\"frames\":[[0,1,0,2,2,2,2,3,2,0,3,0,0,3,0],[0,1,0,2,2,2,2,3,2,0,3,0,3,0,3]],\"pallette\":[\"0,0,0\",\"255,255,255\",\"255,100,100\",\"0,255,255\"]}; module.exports = Human;\n\n//# sourceURL=webpack://led-testing/./sprites/Human.js?");

/***/ }),

/***/ "./sprites/SmallMountain1.js":
/*!***********************************!*\
  !*** ./sprites/SmallMountain1.js ***!
  \***********************************/
/***/ ((module) => {

eval("const SmallMountain1 = {\"id\":\"f3756d4c\",\"name\":\"SmallMountain1\",\"speed\":15,\"loop\":true,\"frameWidth\":20,\"frameHeight\":10,\"frames\":[[0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,5,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,5,5,5,5,2,1,0,0,0,0,0,0,0,0,0,0,0,1,2,5,5,5,5,5,5,2,1,0,0,0,0,0,0,0,0,0,1,2,5,5,5,5,5,5,5,5,2,1,0,0,0,0,0,0,0,1,2,5,5,5,5,5,5,5,5,5,5,2,1,0,0,0,0,0,1,2,5,5,5,5,5,5,5,5,5,5,5,5,2,1,0,0,0,1,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,1,0,1,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,1]],\"pallette\":[\"0,0,0\",\"4,91,0\",\"28,115,0\",\"10,229,0\",\"56,230,0\",\"60,191,0\"]}; module.exports = SmallMountain1;\n\n//# sourceURL=webpack://led-testing/./sprites/SmallMountain1.js?");

/***/ }),

/***/ "./sprites/Sprite.js":
/*!***************************!*\
  !*** ./sprites/Sprite.js ***!
  \***************************/
/***/ ((module) => {

eval("class Sprite {\r\n    constructor(sprite) {\r\n        this.pallette = sprite.pallette;\r\n        this.frames = sprite.frames;\r\n        this.frameCount = this.frames.length;\r\n        this.frameWidth = sprite.frameWidth;\r\n        this.frameHeight = sprite.frameHeight;\r\n        this.currentFrame = 0;\r\n    }\r\n\r\n    animate(time) {\r\n        this.currentFrame++;\r\n        if(this.currentFrame >= this.frameCount) {\r\n            this.currentFrame = 0;\r\n        }\r\n    }\r\n\r\n    getFrame(frameNumber) {\r\n        let frame = [];\r\n        if(this.frames[frameNumber]) {\r\n            frame= this.frames[frameNumber];\r\n        }\r\n        return frame;\r\n    }\r\n\r\n    getFrameSize() {\r\n        return {\r\n            width: this.frameWidth, \r\n            height: this.frameHeight\r\n        }\r\n    }\r\n\r\n    getNextFrame() {\r\n        return this.getFrame(this.currentFrame);\r\n    }\r\n}\r\n\r\nmodule.exports = Sprite;\n\n//# sourceURL=webpack://led-testing/./sprites/Sprite.js?");

/***/ }),

/***/ "./sprites/Sprites.js":
/*!****************************!*\
  !*** ./sprites/Sprites.js ***!
  \****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Sprite = __webpack_require__(/*! ./Sprite */ \"./sprites/Sprite.js\");\r\nconst DropShip = __webpack_require__(/*! ./ships/DropShip */ \"./sprites/ships/DropShip.js\");\r\nconst Bomber = __webpack_require__(/*! ./ships/Bomber */ \"./sprites/ships/Bomber.js\");\r\nconst GenericExplosion = __webpack_require__(/*! ./GenericExplosion */ \"./sprites/GenericExplosion.js\");\r\nconst GenericExplosion2 = __webpack_require__(/*! ./Explosion2 */ \"./sprites/Explosion2.js\");\r\nconst Laser = __webpack_require__(/*! ./projectiles/Laser */ \"./sprites/projectiles/Laser.js\");\r\nconst Bomb1 = __webpack_require__(/*! ./projectiles/Bomb1 */ \"./sprites/projectiles/Bomb1.js\");\r\nconst Human = __webpack_require__(/*! ./Human */ \"./sprites/Human.js\");\r\nconst PlayerShip = __webpack_require__(/*! ./ships/PlayerShip2 */ \"./sprites/ships/PlayerShip2.js\")\r\nconst SmallMountain1 = __webpack_require__(/*! ./SmallMountain1 */ \"./sprites/SmallMountain1.js\");\r\nconst MoonBackground = __webpack_require__(/*! ./TinyMoon */ \"./sprites/TinyMoon.js\");\r\nconst Fireball1 = __webpack_require__(/*! ./projectiles/Fireball1 */ \"./sprites/projectiles/Fireball1.js\");\r\n\r\nSprites = {\r\n    enemies: {\r\n        dropShip: {\r\n            ship: DropShip,\r\n            explosion: GenericExplosion2,\r\n        },\r\n        bomber: {\r\n            ship: Bomber,\r\n            explosion: GenericExplosion2,\r\n            projectile: Bomb1\r\n        }\r\n    },\r\n    player: {\r\n        defaultShip: {\r\n            ship: PlayerShip,\r\n            explosion: GenericExplosion2,\r\n            projectile: Fireball1\r\n        }\r\n    },\r\n    human: Human,\r\n    mountain1: SmallMountain1,\r\n    moonBackground: MoonBackground\r\n}\r\n\r\nmodule.exports = Sprites;\n\n//# sourceURL=webpack://led-testing/./sprites/Sprites.js?");

/***/ }),

/***/ "./sprites/TinyMoon.js":
/*!*****************************!*\
  !*** ./sprites/TinyMoon.js ***!
  \*****************************/
/***/ ((module) => {

eval("const TinyMoon = {\"id\":\"c753903e\",\"name\":\"TinyMoon\",\"speed\":15,\"loop\":true,\"frameWidth\":17,\"frameHeight\":17,\"frames\":[[0,0,0,0,1,2,3,4,5,4,3,2,1,0,0,0,0,0,0,0,6,3,5,5,5,5,5,5,5,3,6,0,0,0,0,0,2,5,5,5,5,5,5,5,5,5,5,5,7,0,0,0,8,5,5,5,5,3,9,10,1,0,1,8,3,5,11,0,12,3,5,5,5,13,14,0,0,0,0,0,0,0,9,3,15,8,5,5,5,13,1,0,0,0,0,0,0,0,0,0,15,10,16,5,5,4,17,0,0,0,0,0,0,0,0,0,0,0,1,4,5,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,10,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,12,0,0,0,0,0,0,0,0,0,0,0,0,0,11,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,5,5,12,0,0,0,0,0,0,0,0,0,0,0,0,0,1,18,5,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,19,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,2,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,10,15,0,0,0,0,0,0,0,0,0,0]],\"pallette\":[\"0,0,0\",\"30,30,30\",\"140,140,140\",\"220,220,220\",\"230,230,230\",\"240,240,240\",\"110,110,110\",\"210,210,210\",\"100,100,100\",\"150,150,150\",\"80,80,80\",\"170,170,170\",\"40,40,40\",\"180,180,180\",\"70,70,70\",\"50,50,50\",\"160,160,160\",\"60,60,60\",\"200,200,200\",\"190,190,190\"]}; module.exports = TinyMoon;\n\n//# sourceURL=webpack://led-testing/./sprites/TinyMoon.js?");

/***/ }),

/***/ "./sprites/projectiles/Bomb1.js":
/*!**************************************!*\
  !*** ./sprites/projectiles/Bomb1.js ***!
  \**************************************/
/***/ ((module) => {

eval("const Bomb1 = {\"id\":\"33fd5968\",\"name\":\"Bomb1\",\"speed\":100,\"loop\":true,\"frameWidth\":3,\"frameHeight\":7,\"frames\":[[1,0,1,0,1,0,3,2,1,3,2,1,6,4,5,3,2,1,0,1,0],[1,0,1,0,1,0,3,2,1,3,2,1,6,4,5,3,2,1,0,1,0],[1,0,1,0,1,0,3,2,1,3,2,1,6,4,5,3,2,1,0,1,0],[0,1,0,0,1,0,3,2,1,3,2,1,6,4,5,3,2,1,0,1,0],[0,1,0,0,1,0,3,2,1,3,2,1,6,4,5,3,2,1,0,1,0],[0,1,0,0,1,0,3,2,1,3,2,1,6,4,5,3,2,1,0,1,0]],\"pallette\":[\"0,0,0\",\"217,217,217\",\"140,140,140\",\"77,77,77\",\"0,109,590\",\"117,179,456\",\"0,60,322\"]}; module.exports = Bomb1;\n\n//# sourceURL=webpack://led-testing/./sprites/projectiles/Bomb1.js?");

/***/ }),

/***/ "./sprites/projectiles/Fireball1.js":
/*!******************************************!*\
  !*** ./sprites/projectiles/Fireball1.js ***!
  \******************************************/
/***/ ((module) => {

eval("const Fireball1 = {\"id\":\"bb7a0790\",\"name\":\"Fireball1\",\"speed\":100,\"loop\":true,\"frameWidth\":6,\"frameHeight\":3,\"frames\":[[0,3,3,0,2,0,3,3,0,5,1,5,0,3,3,0,2,0],[0,3,0,3,2,0,3,0,5,5,1,5,0,3,0,3,2,0],[0,0,3,3,2,0,0,3,5,5,1,5,0,0,3,3,2,0]],\"pallette\":[\"0,0,0\",\"244,478,138\",\"358,152,29\",\"254,95,0\",\"268,242,182\",\"284,197,0\"]}; module.exports = Fireball1;\n\n//# sourceURL=webpack://led-testing/./sprites/projectiles/Fireball1.js?");

/***/ }),

/***/ "./sprites/projectiles/Laser.js":
/*!**************************************!*\
  !*** ./sprites/projectiles/Laser.js ***!
  \**************************************/
/***/ ((module) => {

eval("const Laser = {\"id\":\"a79db409\",\"name\":\"Laser\",\"speed\":200,\"loop\":true,\"frameWidth\":6,\"frameHeight\":1,\"frames\":[[4,3,3,2,1,2],[0,6,6,5,8,5]],\"pallette\":[\"0,0,0\",\"288,222,73\",\"258,179,0\",\"155,107,0\",\"103,72,0\",\"368,142,7\",\"77,54,0\",\"284,226,95\",\"248,394,182\"]}; module.exports = Laser;\n\n//# sourceURL=webpack://led-testing/./sprites/projectiles/Laser.js?");

/***/ }),

/***/ "./sprites/ships/Bomber.js":
/*!*********************************!*\
  !*** ./sprites/ships/Bomber.js ***!
  \*********************************/
/***/ ((module) => {

eval("const Bomber = {\"id\":\"15876ac5\",\"name\":\"Bomber\",\"speed\":200,\"loop\":true,\"frameWidth\":7,\"frameHeight\":3,\"frames\":[[0,0,1,1,2,0,0,1,4,5,6,4,5,2,0,1,1,3,2,2,0],[0,0,1,1,2,0,0,1,6,4,5,6,4,2,0,1,1,3,2,2,0],[0,0,1,1,2,0,0,1,5,6,4,5,6,2,0,1,1,3,2,2,0]],\"pallette\":[\"0,0,0\",\"100,100,100\",\"175,175,175\",\"255,255,255\",\"0,0,50\",\"0,0,125\",\"0,0,255\"]}; module.exports = Bomber;\n\n//# sourceURL=webpack://led-testing/./sprites/ships/Bomber.js?");

/***/ }),

/***/ "./sprites/ships/DropShip.js":
/*!***********************************!*\
  !*** ./sprites/ships/DropShip.js ***!
  \***********************************/
/***/ ((module) => {

eval("const DropShip = {\"id\":\"042a81f0\",\"name\":\"DropShip\",\"speed\":200,\"loop\":true,\"frameWidth\":7,\"frameHeight\":6,\"frames\":[[0,0,3,3,3,0,0,0,3,4,4,4,3,0,3,4,0,4,0,4,3,3,4,0,4,0,4,3,0,3,3,0,3,3,0,0,8,0,8,0,8,0],[0,0,3,3,3,0,0,0,3,4,4,4,3,0,3,4,5,4,5,4,3,3,4,5,4,5,4,3,0,3,3,0,3,3,0,0,0,8,0,8,0,0]],\"pallette\":[\"0,0,0\",\"255,0,0\",\"100,100,100\",\"255,100,0\",\"100,50,0\",\"255,255,255\",\"20,20,20\",\"50,50,200\",\"175,175,175\"]}; module.exports = DropShip;\n\n//# sourceURL=webpack://led-testing/./sprites/ships/DropShip.js?");

/***/ }),

/***/ "./sprites/ships/PlayerShip2.js":
/*!**************************************!*\
  !*** ./sprites/ships/PlayerShip2.js ***!
  \**************************************/
/***/ ((module) => {

eval("const PlayerShip2 = {\"id\":\"753df093\",\"name\":\"PlayerShip2\",\"speed\":15,\"loop\":true,\"frameWidth\":10,\"frameHeight\":5,\"frames\":[[0,1,2,2,2,2,2,2,2,2,2,3,1,4,5,6,7,8,2,2,8,6,9,10,9,9,11,12,4,13,6,14,13,9,9,12,11,13,11,11,2,2,2,13,13,11,11,2,2,2]],\"pallette\":[\"180,190,210\",\"50,60,90\",\"0,0,0\",\"90,100,130\",\"40,230,240\",\"190,60,40\",\"250,170,50\",\"240,110,30\",\"250,230,90\",\"0,150,210\",\"250,250,250\",\"0,60,80\",\"0,100,140\",\"0,40,60\",\"286,107,0\"]}; module.exports = PlayerShip2;\n\n//# sourceURL=webpack://led-testing/./sprites/ships/PlayerShip2.js?");

/***/ }),

/***/ "./utils/BrowserGamePad.js":
/*!*********************************!*\
  !*** ./utils/BrowserGamePad.js ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Utils = __webpack_require__(/*! ./Functions */ \"./utils/Functions.js\");\r\n\r\nclass BrowserGamePad {\r\n    constructor() {\r\n        this.gamepad = null;\r\n        this.data = {\r\n            analogs: {\r\n                left: {\r\n                    x: 0,\r\n                    y: 0,\r\n                },\r\n                right: {\r\n                    x: 0,\r\n                    y: 0,\r\n                },\r\n            },\r\n            dPad: {\r\n                up: 0,\r\n                down: 0,\r\n                right: 0,\r\n                left: 0,\r\n            },\r\n            buttons: {\r\n                selectButton: 0,\r\n                startButton: 0,\r\n                triangle: 0,\r\n                circle: 0,\r\n                square: 0,\r\n                cross: 0,\r\n            },\r\n        };\r\n\r\n        this.start();\r\n    }\r\n\r\n    start() {\r\n        window.addEventListener(\"gamepadconnected\", (e) => {\r\n            this.gamepad = navigator.getGamepads()[e.gamepad.index];\r\n            console.log(\"Gamepad connected at index %d: %s. %d buttons, %d axes.\", this.gamepad.index, this.gamepad.id, this.gamepad.buttons.length, this.gamepad.axes.length);\r\n        });\r\n    }\r\n\r\n    receive(data) {\r\n        this.data = {\r\n            analogs: {\r\n                left: {\r\n                    x: data.axes[0],\r\n                    y: data.axes[1],\r\n                },\r\n                right: {\r\n                    x: data.axes[2],\r\n                    y: data.axes[3],\r\n                },\r\n            },\r\n            dPad: {\r\n                up: data.buttons[12].value * 100,\r\n                down: data.buttons[13].value * 100,\r\n                right: data.buttons[15].value * 100,\r\n                left: data.buttons[14].value * 100,\r\n            },\r\n            buttons: {\r\n                selectButton: data.buttons[8].value,\r\n                startButton: data.buttons[9].value,\r\n                homeButton: data.buttons[16].value,\r\n                triangle: data.buttons[3].value * 100,\r\n                circle: data.buttons[1].value * 100,\r\n                square: data.buttons[2].value * 100,\r\n                cross: data.buttons[0].value * 100,\r\n            },\r\n        };\r\n    }\r\n\r\n    read() {\r\n        if (this.gamepad) {\r\n            // console.info(\"this.gamepad\", this.gamepad);\r\n            this.gamepad = navigator.getGamepads()[this.gamepad.index];\r\n            this.receive(this.gamepad);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = BrowserGamePad;\r\n\n\n//# sourceURL=webpack://led-testing/./utils/BrowserGamePad.js?");

/***/ }),

/***/ "./utils/CanvasPanel.js":
/*!******************************!*\
  !*** ./utils/CanvasPanel.js ***!
  \******************************/
/***/ ((module) => {

eval("class CanvasPanel {\r\n    constructor(screenSize) {\r\n        this.ledPixels = [];\r\n        this.matrix = null;\r\n        this.isDirty = false;\r\n        this.tempPixel = null;\r\n        this.config = screenSize;\r\n        this.frameWidth = this.config.width * 2;\r\n        this.showDebug = true;\r\n        this.canvasElement = null;\r\n        this.pixelImage = null;\r\n        this.pixelImageData = null;\r\n        this.start();\r\n    }\r\n\r\n    start() {\r\n        this.canvasElement = document.createElement(\"canvas\");\r\n        this.canvasElement.width = this.config.width;\r\n        this.canvasElement.height = this.config.height;\r\n        const targetDiv = document.createElement(\"div\");\r\n        targetDiv.id = \"gameField\";\r\n        targetDiv.appendChild(this.canvasElement);\r\n        document.body.appendChild(targetDiv);\r\n        this.matrix = this.canvasElement.getContext(\"2d\");\r\n\r\n        this.pixelImage = this.matrix.createImageData(1, 1);\r\n        this.pixelImageData = this.pixelImage.data;\r\n        this.matrix.translate(0, -0.5);\r\n        this.clear();\r\n    }\r\n\r\n    clear() {\r\n        if (this.matrix) {\r\n            this.matrix.clearRect(-1, -1, this.config.width + 1, this.config.height + 1);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.matrix) {\r\n            // this.matrix.update();\r\n        }\r\n    }\r\n\r\n    drawText(x, y, text, font, r, g, b) {\r\n        if (this.matrix) {\r\n            this.matrix.fillStyle = `rgb(${r}, ${g}, ${b})`;\r\n            this.matrix.font = font; //\"8px arial\";\r\n            this.matrix.textBaseline = \"top\";\r\n            this.matrix.fillText(text, x + window.textOffsetX, y + window.textOffsetY);\r\n        }\r\n    }\r\n\r\n    drawLine(x0, y0, x1, y1, r, g, b) {\r\n        if (this.matrix) {\r\n            this.matrix.strokeStyle = `rgb(${r}, ${g}, ${b})`;\r\n            this.matrix.fillStyle = `rgb(${r}, ${g}, ${b})`;\r\n            this.matrix.beginPath();\r\n            this.matrix.moveTo(Math.round(x0), Math.round(y0));\r\n            this.matrix.lineTo(Math.round(x1), Math.round(y1));\r\n            this.matrix.stroke();\r\n            this.matrix.fill();\r\n        }\r\n    }\r\n\r\n    drawCircle(x0, y0, radius, r, g, b) {\r\n        if (this.matrix) {\r\n            this.matrix.strokeStyle = `rgb(${r}, ${g}, ${b})`;\r\n            this.matrix.beginPath();\r\n            this.matrix.arc(Math.round(x0), Math.round(y0), radius, 0, Math.PI * 2, false);\r\n            this.matrix.stroke();\r\n        }\r\n    }\r\n\r\n    fill(r, g, b) {\r\n        if (this.matrix) {\r\n            // this.matrix.fill(r, g, b);\r\n        }\r\n    }\r\n\r\n    setPixel(x, y, r, g, b) {\r\n        if (this.matrix) {\r\n            this.matrix.strokeStyle = `rgb(${r}, ${g}, ${b})`;\r\n            this.matrix.beginPath();\r\n            this.matrix.moveTo(Math.round(x), Math.round(y));\r\n            this.matrix.lineTo(Math.round(x + 1), Math.round(y));\r\n            this.matrix.stroke();\r\n        }\r\n    }\r\n\r\n    drawSprite(startX, startY, sprite, flipped = false) {\r\n        const frameWidth = sprite.frameWidth;\r\n        const frameHeight = sprite.frameHeight;\r\n        const pallette = sprite.pallette;\r\n        const frame = sprite.getNextFrame();\r\n\r\n        for (let y = 0; y < frameHeight; y++) {\r\n            const start = y * frameWidth;\r\n            const end = start + frameWidth;\r\n            const currentRow = frame.slice(start, end); //frame[y];\r\n            // console.info(currentRow);\r\n            if (flipped) {\r\n                for (let x = frameWidth - 1; x >= 0; x--) {\r\n                    const currentPixel = currentRow[x];\r\n                    const currentColor = pallette[currentPixel].split(\",\");\r\n                    const r = parseInt(currentColor[0]);\r\n                    const g = parseInt(currentColor[1]);\r\n                    const b = parseInt(currentColor[2]);\r\n                    const isBlack = r === 0 && (g === 0) & (b === 0);\r\n                    if (!isBlack) {\r\n                        this.setPixel(startX + (frameWidth - x), startY + y, r, g, b);\r\n                    }\r\n                }\r\n            } else {\r\n                for (let x = 0; x < frameWidth; x++) {\r\n                    const currentPixel = currentRow[x];\r\n                    const currentColor = pallette[currentPixel].split(\",\");\r\n                    const r = parseInt(currentColor[0]);\r\n                    const g = parseInt(currentColor[1]);\r\n                    const b = parseInt(currentColor[2]);\r\n                    const isBlack = r === 0 && (g === 0) & (b === 0);\r\n                    if (!isBlack) {\r\n                        this.setPixel(startX + x, startY + y, r, g, b);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    drawMountain(x = 0, ground = 0, height = 10, color = [0, 255, 0], borderColor = [150, 150, 0]) {\r\n        // const mntSprite = new Sprite(Sprites.mountain1)\r\n        // this.drawSprite(x, ground-height, mntSprite);\r\n        for (let i = 0; i <= height; i++) {\r\n            this.drawLine(x + i, ground - i, x + height * 2 - i, ground - i, ...color);\r\n        }\r\n        this.drawMountainLines(x, ground, height, borderColor);\r\n    }\r\n\r\n    drawMountainLines(x = 0, y = 0, height = 10, color = [0, 255, 0]) {\r\n        let mntStartX = x;\r\n        let mntStartY = y;\r\n        let mntHeight = height;\r\n        let mntWidth = mntHeight * 2;\r\n        let mntColor = color;\r\n        let mntTipX = mntStartX + mntWidth / 2;\r\n        let mntTipY = mntStartY - mntHeight;\r\n\r\n        let mntEndX = mntStartX + mntWidth;\r\n        let mntEndY = mntStartY;\r\n\r\n        if (this.matrix) {\r\n            this.drawLine(mntStartX, mntStartY, mntTipX, mntTipY, ...mntColor);\r\n            this.drawLine(mntTipX, mntTipY, mntEndX, mntEndY, ...mntColor);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = CanvasPanel;\r\n\n\n//# sourceURL=webpack://led-testing/./utils/CanvasPanel.js?");

/***/ }),

/***/ "./utils/Functions.js":
/*!****************************!*\
  !*** ./utils/Functions.js ***!
  \****************************/
/***/ ((module) => {

eval("const Functions =  {\r\n    normalize(value, min, max) {\r\n        return (value - min) / (max - min);\r\n    }          \r\n}\r\n\r\nmodule.exports = Functions;\n\n//# sourceURL=webpack://led-testing/./utils/Functions.js?");

/***/ }),

/***/ "./utils/Simulation.js":
/*!*****************************!*\
  !*** ./utils/Simulation.js ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const SpaceShip = __webpack_require__(/*! ../ships/SpaceShip */ \"./ships/SpaceShip.js\");\r\n// const EnemyShip = require('../ships/EnemyShip');\r\nconst Star = __webpack_require__(/*! ../objects/Star */ \"./objects/Star.js\");\r\nconst Projectile = __webpack_require__(/*! ../ships/projectiles/Projectile */ \"./ships/projectiles/Projectile.js\");\r\nconst Human = __webpack_require__(/*! ../objects/Human */ \"./objects/Human.js\");\r\nconst Sprites = __webpack_require__(/*! ../sprites/Sprites */ \"./sprites/Sprites.js\");\r\nconst DropShip = __webpack_require__(/*! ../ships/DropShip */ \"./ships/DropShip.js\");\r\nconst Bomber = __webpack_require__(/*! ../ships/Bomber */ \"./ships/Bomber.js\");\r\nconst Laser = __webpack_require__(/*! ../ships/projectiles/Laser */ \"./ships/projectiles/Laser.js\");\r\nconst Bomb = __webpack_require__(/*! ../ships/projectiles/Bomb */ \"./ships/projectiles/Bomb.js\");\r\n\r\nclass Simulation {\r\n    constructor(panel, screenSize, levelConfig) {\r\n        this.levelConfig = levelConfig;\r\n        this.enemies = [];\r\n        this.bombers = [];\r\n        this.dropShips = [];\r\n        this.players = [];\r\n        this.stars = [];\r\n        this.humans = [];\r\n        this.projectiles = [];\r\n        this.panel = panel;\r\n        this.totalDropShips = this.levelConfig.maxDropShips;\r\n        this.totalBombers = this.levelConfig.maxBombers;\r\n        this.totalHumans = this.levelConfig.totalHumans;\r\n        this.score = 0;\r\n        this.groundLevel = 55;\r\n        this.isRunning = false;\r\n        this.isPaused = false;\r\n        this.screenSize = screenSize;\r\n        this.isBrowserBased = false;\r\n        this.objectPositions = {\r\n            x: [],\r\n            y: [],\r\n        };\r\n    }\r\n\r\n    start() {\r\n        console.debug(\" -- simulation start -- \");\r\n        this.isRunning = true;\r\n\r\n        this.score = 0;\r\n\r\n        for (let i = 0; i < this.enemies.length; i++) {\r\n            this.enemies[i].destroy();\r\n        }\r\n\r\n        for (let i = 0; i < this.humans.length; i++) {\r\n            this.humans[i].destroy();\r\n        }\r\n\r\n        for (let i = 0; i < this.projectiles.length; i++) {\r\n            this.projectiles[i].destroy();\r\n        }\r\n\r\n        this.createPlayer(20, 60, this.panel);\r\n\r\n        if (this.humans.length < this.totalHumans) {\r\n            for (let i = 0; i < this.totalHumans - this.humans.length; i++) {\r\n                const newX = Math.round(Math.random() * 240);\r\n                const newY = 10; //this.groundLevel - 5;\r\n                this.createHuman(newX, newY, this.panel);\r\n            }\r\n        }\r\n\r\n        // generate star field\r\n        if (this.stars.length === 0) {\r\n            for (let i = 0; i < 30; i++) {\r\n                const newX = Math.round(Math.random() * this.screenSize.width);\r\n                const newY = Math.round(Math.random() * this.getGroundLevel());\r\n                this.createStar(newX, newY, this.panel);\r\n            }\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        console.debug(\" -- simulation stop -- \");\r\n        for (let i = 0; i < this.enemies.length; i++) {\r\n            this.enemies[i].deactivate();\r\n        }\r\n\r\n        for (let i = 0; i < this.humans.length; i++) {\r\n            this.humans[i].deactivate();\r\n        }\r\n\r\n        for (let i = 0; i < this.players.length; i++) {\r\n            this.players[i].deactivate();\r\n        }\r\n\r\n        for (let i = 0; i < this.projectiles.length; i++) {\r\n            this.projectiles[i].deactivate();\r\n        }\r\n\r\n        this.enemies = [];\r\n        this.humans = [];\r\n        this.projectiles = [];\r\n        this.players = [];\r\n\r\n        this.isRunning = false;\r\n    }\r\n\r\n    pause() {\r\n        this.isPaused = !this.isPaused;\r\n    }\r\n\r\n    tick(time) {\r\n        if (!this.isRunning || this.isPaused) {\r\n            return;\r\n        }\r\n        // clean up dead objects\r\n        if (this.projectiles.length > 0) {\r\n            this.projectiles = this.projectiles.filter((projectile) => projectile.isActive);\r\n        }\r\n\r\n        this.objectPositions.x = new Array();\r\n        this.objectPositions.y = new Array();\r\n\r\n        // if(this.humans.length === 0) {\r\n        //     this.stop();\r\n        // }\r\n\r\n        if (this.dropShips.length < this.totalDropShips) {\r\n            if (Math.random() * 10 >= 9.5) {\r\n                const newX = Math.round(Math.random() * 240);\r\n                const newY = -10;\r\n                this.createDropShip(newX, newY, this.panel);\r\n            }\r\n        }\r\n\r\n        if (this.bombers.length < this.totalBombers) {\r\n            if (Math.random() * 10 >= 9.5) {\r\n                const newX = Math.round(Math.random() * 20) - 40;\r\n                const newY = Math.round(Math.random() * 32) + 10;\r\n                this.createBomber(newX, newY, this.panel);\r\n            }\r\n        }\r\n\r\n        // if(this.humans.length < this.totalHumans) {\r\n        //     for(let i = 0; i<(this.totalHumans-this.humans.length); i++) {\r\n        //         const newX = Math.round(Math.random() * 120);\r\n        //         const newY = this.groundLevel - 5;\r\n        //         this.createHuman(newX,newY, this.panel);\r\n        //     }\r\n        // }\r\n\r\n        // tick player sim\r\n        for (let i = 0; i < this.players.length; i++) {\r\n            const player = this.players[i];\r\n            const playerPos = player.getPos();\r\n            if (!player.isActive && player.getLives() > 0) {\r\n                player.create();\r\n            }\r\n            player.tick(time);\r\n            this.mapObjectPosition(player);\r\n        }\r\n\r\n        // projectile tick\r\n        for (let i = 0; i < this.projectiles.length; i++) {\r\n            const projectile = this.projectiles[i];\r\n            projectile.tick(time);\r\n            this.mapObjectPosition(projectile);\r\n        }\r\n\r\n        // tick enemy sim\r\n        for (let i = 0; i < this.enemies.length; i++) {\r\n            const enemy = this.enemies[i];\r\n            enemy.tick(time);\r\n            this.mapObjectPosition(enemy);\r\n        }\r\n\r\n        // tick humans\r\n        for (let i = 0; i < this.humans.length; i++) {\r\n            const human = this.humans[i];\r\n            // const humanPos = human.getPos();\r\n            // if (humanPos.y < this.groundLevel - 15 && human.getState() == \"free\") {\r\n            //     human.setState(\"falling\");\r\n            // }\r\n            // if (humanPos.y > 50 && human.getState() == \"falling\") {\r\n            //     human.setState(\"free\");\r\n            // }\r\n            human.tick(time);\r\n            this.mapObjectPosition(human);\r\n        }\r\n\r\n        this.bombers = this.bombers.filter((enemy) => enemy.isActive);\r\n        this.dropShips = this.dropShips.filter((enemy) => enemy.isActive);\r\n        this.enemies = this.enemies.filter((enemy) => enemy.isActive);\r\n        this.humans = this.humans.filter((human) => human.isActive);\r\n\r\n        // console.info(\"object\", this.objectPositions.x);\r\n    }\r\n\r\n    animate(time) {\r\n        // animate stars\r\n        for (let i = 0; i < this.stars.length; i++) {\r\n            this.stars[i].animate(time);\r\n        }\r\n\r\n        // animate players\r\n        for (let i = 0; i < this.players.length; i++) {\r\n            this.players[i].animate(time);\r\n        }\r\n\r\n        // projectile animate\r\n        for (let i = 0; i < this.projectiles.length; i++) {\r\n            this.projectiles[i].animate(time);\r\n        }\r\n\r\n        // animate enemies\r\n        for (let i = 0; i < this.enemies.length; i++) {\r\n            this.enemies[i].animate(time);\r\n        }\r\n\r\n        // animate humans\r\n        for (let i = 0; i < this.humans.length; i++) {\r\n            this.humans[i].animate(time);\r\n        }\r\n    }\r\n\r\n    renderBackground() {\r\n        //render stars\r\n        for (let i = 0; i < this.stars.length; i++) {\r\n            this.stars[i].render();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // render players\r\n        for (let i = 0; i < this.players.length; i++) {\r\n            this.players[i].render();\r\n        }\r\n\r\n        // projectile render\r\n        for (let i = 0; i < this.projectiles.length; i++) {\r\n            this.projectiles[i].render();\r\n        }\r\n\r\n        // render enemies\r\n        for (let i = 0; i < this.enemies.length; i++) {\r\n            this.enemies[i].render();\r\n        }\r\n\r\n        // render humans\r\n        for (let i = 0; i < this.humans.length; i++) {\r\n            this.humans[i].render();\r\n        }\r\n    }\r\n\r\n    handleInput(data) {\r\n        // console.info(data.analogs.left.x, data.analogs.left.y);\r\n        if (this.players.length >= 1) {\r\n            this.players[0].handleLeftAnalog(data.analogs.left.x, data.analogs.left.y);\r\n            this.players[0].handleButtons(data.buttons);\r\n        }\r\n    }\r\n\r\n    // player methods\r\n    createPlayer(x, y, panel) {\r\n        const newPlayer = new SpaceShip(x, y, panel, Sprites.player.defaultShip.ship, this);\r\n        newPlayer.create();\r\n        this.addPlayer(newPlayer);\r\n        return newPlayer;\r\n    }\r\n\r\n    addPlayer(newPlayer) {\r\n        this.players.push(newPlayer);\r\n    }\r\n\r\n    removePlayer(oldPlayer) {\r\n        this.players = this.players.filter((player) => player !== oldPlayer);\r\n    }\r\n\r\n    // enemy methods\r\n    createDropShip(x, y, panel) {\r\n        const newEnemy = new DropShip(x, y, panel, Sprites.enemies.dropShip.ship, this);\r\n        this.dropShips.push(newEnemy);\r\n        this.addEnemy(newEnemy);\r\n        newEnemy.create();\r\n        return newEnemy;\r\n    }\r\n\r\n    createBomber(x, y, panel) {\r\n        const newEnemy = new Bomber(x, y, panel, Sprites.enemies.bomber.ship, this);\r\n        this.bombers.push(newEnemy);\r\n        this.addEnemy(newEnemy);\r\n        newEnemy.create();\r\n        return newEnemy;\r\n    }\r\n\r\n    addEnemy(newEnemy) {\r\n        this.enemies.push(newEnemy);\r\n    }\r\n\r\n    removeEnemy(oldEnemy) {\r\n        if (newEnemy.type === \"bomber\") {\r\n            this.bombers.filter((enemy) => enemy !== oldEnemy);\r\n        }\r\n        if (newEnemy.type === \"dropShip\") {\r\n            this.dropShips.filter((enemy) => enemy !== oldEnemy);\r\n        }\r\n        this.enemies.filter((enemy) => enemy !== oldEnemy);\r\n    }\r\n\r\n    // star methods\r\n    createStar(x, y, panel) {\r\n        const newStar = new Star(x, y, panel);\r\n        this.stars.push(newStar);\r\n    }\r\n\r\n    // projectile methods\r\n    createLaser(x, y, panel, sprite, speedX, speedY) {\r\n        const newProjectile = new Laser(x, y, panel, sprite, speedX, speedY, this);\r\n        newProjectile.create();\r\n        this.projectiles.push(newProjectile);\r\n    }\r\n\r\n    createBomb(x, y, panel, sprite, speedX, speedY) {\r\n        const newProjectile = new Bomb(x, y, panel, sprite, speedX, speedY, this);\r\n        newProjectile.create();\r\n        this.projectiles.push(newProjectile);\r\n    }\r\n\r\n    getScore() {\r\n        return this.score;\r\n    }\r\n\r\n    addScore(points) {\r\n        this.score = this.score + points;\r\n    }\r\n\r\n    removeScore(points) {\r\n        this.score = this.score - points;\r\n    }\r\n\r\n    getGroundLevel() {\r\n        return this.groundLevel;\r\n    }\r\n\r\n    getPlayerLives(playerNumber) {\r\n        if (this.players.length === 0) return 0;\r\n        return this.players[playerNumber].getLives();\r\n    }\r\n\r\n    createHuman(x, y, panel, sprite) {\r\n        const newHuman = new Human(x, y, panel, sprite, this);\r\n        newHuman.create();\r\n        this.humans.push(newHuman);\r\n    }\r\n\r\n    getScreenSize() {\r\n        return this.screenSize;\r\n    }\r\n\r\n    mapObjectPosition(object) {\r\n        const objectPos = object.getCenterPoint();\r\n        let tempArr = [];\r\n        if (objectPos.x >= 0 && objectPos.x <= this.screenSize.width && object.isActive) {\r\n            if (this.objectPositions.x[Math.floor(objectPos.x)]) {\r\n                tempArr = this.objectPositions.x[Math.floor(objectPos.x)].slice();\r\n            }\r\n            tempArr.push(object);\r\n            this.objectPositions.x[Math.floor(objectPos.x)] = tempArr;\r\n        }\r\n\r\n        if (objectPos.y >= 0 && objectPos.y <= this.screenSize.height && object.isActive) {\r\n            if (this.objectPositions.y[Math.floor(objectPos.y)]) {\r\n                tempArr = this.objectPositions.y[Math.floor(objectPos.y)].slice();\r\n            }\r\n            tempArr.push(object);\r\n            this.objectPositions.y[Math.floor(objectPos.y)] = tempArr;\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Simulation;\r\n\n\n//# sourceURL=webpack://led-testing/./utils/Simulation.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./browser-main.js");
/******/ 	
/******/ })()
;